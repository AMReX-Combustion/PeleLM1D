PeleLM1D - README
=================

`PeleLM` is an adaptive-mesh low Mach number hydrodynamics code for reacting flows, and has a project
`homepage <https://amrex-combustion.github.io/PeleLM/>`_. This repository contains a 1D version of PeleLM.
Honestly, it's a hack and a mess, but rather than as an optimized, easy-to-use public code, it is designed
as a *relatively* simple implementation of the integration algorithms used in PeleLM, and in fact was used
to debug various modifications to PeleLM. 

The hope is that someday somebody will clean this code up and make it compatible with the physics modules and
chemistry specs and integrators of the mainline Pele development.  For the moment though, this repo is in
"buyer beware" condition.

Getting started
---------------

* This code is nearly all in Fortran (with small bits of C++), and should build with the GNU and Intel compiler suites.

1. To obtain ::

    export PELELM1D_HOME=<location for PeleLM1D>
    git clone https://github.com/AMReX-Combustion/PeleLM1D.git ${PELELM1D_HOME}

2. To compile ::

    cd ${PELELM1D_HOME}
    <edit the GNUmakeile to set COMP=gnu or COMP=intel>
    make

3. To run ::

    ./lmc

* Note that the combustion chemistry model is hardcoded, and selected during the build by settings in the GNUmakefile.  The CHEMKIN-like function calls are written .c files that we generated by an older version of the fuego tool in the Pele git repository, `PelePhysics <https://amrex-combustion.github.io/PelePhyiscs/>`_.  Fuego has changed considerably since the work was done on this code, meaning that if you need a model that is not provided in the `Chemistry/data` folder here, you will have to hack on this repo to be compatible again.

* If you run into trouble, or want more info, feel free to contact Marc Day (MSDay@lbl.gov) or Andy Nonaka (AJNonaka@lbl.gov). 

Acknowledgment
--------------
This research was supported by the Exascale Computing Project (ECP), Project
Number: 17-SC-20-SC, a collaborative effort of two DOE organizations -- the
Office of Science and the National Nuclear Security Administration --
responsible for the planning and preparation of a capable exascale ecosystem --
including software, applications, hardware, advanced system engineering, and
early testbed platforms -- to support the nation's exascale computing
imperative.
